/*
 * File c·∫•u h√¨nh cho DriveCopyAppScript
 * Author: Lj Kenji FB: https://fb.com/lj.kenji
 */

/**
 * C·∫•u h√¨nh ch√≠nh c·ªßa DriveCopyAppScript
 */
const CONFIG = {

  // ==================== C·∫§U H√åNH TRIGGER ====================

  TRIGGER_INTERVAL_GMAIL: 10,
  TRIGGER_INTERVAL_OTHER: 30,
  AUTO_TRIGGER_INTERVAL_MINUTES: 10,    // Kho·∫£ng th·ªùi gian trigger t·ª± ƒë·ªông (ph√∫t)
  AUTO_TRIGGER_MAX_RUNTIME_HOURS: 6,   // Th·ªùi gian t·ªëi ƒëa trigger ho·∫°t ƒë·ªông (gi·ªù)

  // ==================== C·∫§U H√åNH T√äN FILE/FOLDER ====================

  COPYING_FOLDER_PREFIX: "chuacopyxong ",
  NEW_COPY_PREFIX: "Copy of ",
  AUTO_RESUME_ON_MARKER: "AutoResumeOn",
  AUTO_RESUME_OFF_MARKER: "AutoResumeOff",

  // ==================== C·∫§U H√åNH EMAIL ====================

  EMAIL_ERROR_SUBJECT: "Drive Copy AppScript - C√≥ l·ªói trong qu√° tr√¨nh Copy.",
  EMAIL_SUCCESS_SUBJECT: "Drive Copy AppScript - ƒê√£ Copy th√†nh c√¥ng.",
  GITHUB_ISSUE_URL: "https://github.com/ljkenji/DriveCopyAppScript/issues",
  TOOL_NAME: "DriveCopyAppScript",

  // ==================== C·∫§U H√åNH LOGGING ====================

  LOG_FILE_PREFIX: "Log of ",
  LOG_HEADERS: ['Time', 'File Name', 'Size Items', 'Total Items', 'Number Of Files', 'Number Of Folders', 'Total Size'],

  // ==================== C·∫§U H√åNH TRACKING SYSTEM ====================

  TRACKING_SHEET_NAME_PATTERN: "Copy Tracking - {SOURCE_ID} to {DEST_ID}",
  TRACKING_SHEET_EXTENSION: "",
  TRACKING_HEADERS: ['STT', 'T√™n', 'Lo·∫°i', 'K√≠ch th∆∞·ªõc', 'ƒê∆∞·ªùng d·∫´n', 'Tr·∫°ng th√°i'],

  COPY_STATUS: {
    PENDING: {
      text: "Ch∆∞a copy",
      backgroundColor: "#FF0000",
      fontColor: "#FFFFFF"
    },
    COMPLETED: {
      text: "ƒê√£ copy",
      backgroundColor: "#00FF00",
      fontColor: "#FFFFFF"
    },
    ERROR: {
      text: "L·ªói copy",
      backgroundColor: "#FFFF00",
      fontColor: "#000000"
    },
    NOT_FOUND: {
      text: "File kh√¥ng t·ªìn t·∫°i",
      backgroundColor: "#808080",
      fontColor: "#FFFFFF"
    }
  },

  MAX_FILES_PER_RUN: 30,               // Gi·∫£m t·ª´ 50 xu·ªëng 30 ƒë·ªÉ tr√°nh timeout

  // ==================== C·∫§U H√åNH PERFORMANCE (M·ªöI) ====================

  // Batch processing settings - T·ªëi ∆∞u h√≥a ƒë·ªÉ tr√°nh timeout
  BATCH_SIZE_SHEETS: 300,           // Gi·∫£m t·ª´ 500 xu·ªëng 300 cho sheet operations
  BATCH_SIZE_FORMATS: 200,          // Th√™m m·ªõi: Gi·ªõi h·∫°n format operations ƒë·ªÉ tr√°nh timeout
  BATCH_SIZE_DRIVE: 100,            // S·ªë operations t·ªëi ƒëa cho batch drive operations
  MEMORY_CLEANUP_THRESHOLD: 5000,   // Threshold ƒë·ªÉ trigger memory cleanup

  // Chunking settings cho large datasets
  SCAN_CHUNK_SIZE: 500,             // S·ªë items t·ªëi ƒëa m·ªói chunk khi scan
  FORMAT_CHUNK_SIZE: 100,           // S·ªë format operations m·ªói chunk
  PROGRESSIVE_FLUSH_THRESHOLD: 150, // Flush khi ƒë·∫°t threshold n√†y

  // API Rate limiting settings
  API_DELAY_MIN_MS: 100,            // Delay t·ªëi thi·ªÉu gi·ªØa API calls (ms)
  API_DELAY_MAX_MS: 5000,           // Delay t·ªëi ƒëa cho exponential backoff (ms)
  API_RETRY_MAX: 3,                 // S·ªë l·∫ßn retry t·ªëi ƒëa cho API calls

  // Pagination settings cho large folders
  FOLDER_SCAN_PAGE_SIZE: 800,       // Gi·∫£m t·ª´ 1000 xu·ªëng 800 items m·ªói l·∫ßn scan
  LARGE_FOLDER_THRESHOLD: 1500,     // Gi·∫£m t·ª´ 2000 xu·ªëng 1500 ƒë·ªÉ x·ª≠ l√Ω s·ªõm h∆°n

  // Timeout prevention settings
  EXECUTION_TIME_LIMIT_MS: 300000,  // 5 ph√∫t (300 gi√¢y) - d√†nh 1 ph√∫t buffer
  PROGRESS_SAVE_INTERVAL: 100,      // L∆∞u progress m·ªói 100 operations
  ENABLE_PROGRESSIVE_PROCESSING: true, // B·∫≠t x·ª≠ l√Ω t·ª´ng ph·∫ßn

  // Performance monitoring
  ENABLE_PERFORMANCE_MONITORING: true,  // B·∫≠t/t·∫Øt performance monitoring
  ENABLE_MEMORY_TRACKING: true,         // B·∫≠t/t·∫Øt memory tracking
  ENABLE_API_QUOTA_MANAGEMENT: true,    // B·∫≠t/t·∫Øt API quota management

  // ==================== C·∫§U H√åNH N√ÇNG CAO ====================

  SEND_COMPLETION_EMAIL: true,
  SEND_ERROR_EMAIL: true,
  AUTO_CREATE_TRIGGER: true,
  AUTO_DELETE_TRIGGER: true
};

/**
 * H√†m l·∫•y c·∫•u h√¨nh (ƒë√£ t√≠ch h·ª£p caching cho folder URLs)
 */
function getConfig() {
  try {
    Logger.log("üìã ƒêang load c·∫•u h√¨nh t·ª´ config.gs v√† folder.gs...");

    // Ki·ªÉm tra xem file folder.gs c√≥ t·ªìn t·∫°i kh√¥ng
    let folderConfig;
    try {
      folderConfig = getFolderConfig(); // S·ª≠ d·ª•ng caching mechanism
      // Log message s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã t·ª´ getFolderConfig() (cache hit/miss)
    } catch (error) {
      Logger.log("‚ùå L·ªói khi load file folder.gs: " + error.toString());
      Logger.log("üí° H∆∞·ªõng d·∫´n: Vui l√≤ng t·∫°o file folder.gs v√† c·∫•u h√¨nh SOURCE_URL, DESTINATION_URL");

      // Clear cache khi c√≥ l·ªói
      if (typeof clearFolderConfigCache === 'function') {
        clearFolderConfigCache();
      }

      throw new Error("File folder.gs kh√¥ng t·ªìn t·∫°i ho·∫∑c c√≥ l·ªói. Vui l√≤ng ki·ªÉm tra file folder.gs v√† c·∫•u h√¨nh ƒë√∫ng SOURCE_URL, DESTINATION_URL");
    }

    // Merge CONFIG v·ªõi folder URLs
    const mergedConfig = {
      ...CONFIG,
      ...folderConfig
    };

    Logger.log("üîó ƒê√£ merge c·∫•u h√¨nh th√†nh c√¥ng - CONFIG + folder URLs");
    return mergedConfig;

  } catch (error) {
    Logger.log("üí• L·ªói nghi√™m tr·ªçng khi load c·∫•u h√¨nh: " + error.toString());

    // Clear cache khi c√≥ l·ªói nghi√™m tr·ªçng
    if (typeof clearFolderConfigCache === 'function') {
      clearFolderConfigCache();
    }

    throw error;
  }
}

/**
 * H√†m l·∫•y gi√° tr·ªã c·∫•u h√¨nh c·ª• th·ªÉ
 */
function getConfigValue(key, defaultValue = null) {
  return CONFIG.hasOwnProperty(key) ? CONFIG[key] : defaultValue;
}

/**
 * H√†m validate c·∫•u h√¨nh (ƒë√£ c·∫≠p nh·∫≠t ƒë·ªÉ ki·ªÉm tra folder.gs)
 */
function validateConfig() {
  try {
    Logger.log("üîç B·∫Øt ƒë·∫ßu validate c·∫•u h√¨nh...");

    // L·∫•y c·∫•u h√¨nh ƒë√£ merge
    const config = getConfig();

    // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
    const requiredFields = [
      'SOURCE_FOLDER_URL',
      'DESTINATION_FOLDER_URL'
    ];

    for (let field of requiredFields) {
      if (!config[field]) {
        Logger.log(`‚ùå L·ªói: Thi·∫øu c·∫•u h√¨nh ${field}. Vui l√≤ng ki·ªÉm tra file folder.gs`);
        return false;
      }

      if (config[field].includes('YOUR_')) {
        Logger.log(`‚ùå L·ªói: ${field} ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Vui l√≤ng c·∫≠p nh·∫≠t URL trong file folder.gs`);
        Logger.log(`üí° H∆∞·ªõng d·∫´n: M·ªü file folder.gs v√† thay th·∫ø URL placeholder b·∫±ng URL th·ª±c t·∫ø`);
        return false;
      }
    }

    // Validate folder access n·∫øu c√≥ function validateFolderAccess
    try {
      validateFolderAccess();
      Logger.log("‚úÖ Validation folder access th√†nh c√¥ng");
    } catch (error) {
      Logger.log("‚ùå L·ªói validation folder access: " + error.toString());
      return false;
    }

    Logger.log("üéâ Validation c·∫•u h√¨nh ho√†n th√†nh - T·∫•t c·∫£ ƒë·ªÅu h·ª£p l·ªá!");
    return true;

  } catch (error) {
    Logger.log("üí• L·ªói trong qu√° tr√¨nh validate c·∫•u h√¨nh: " + error.toString());
    return false;
  }
}
