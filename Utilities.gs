/*
 * Utilities - T√≠ch h·ª£p c√°c utility functions cho DriveCopyAppScript v1.0
 * Author: Lj Kenji - https://fb.com/lj.kenji
 */

/**
 * L·∫•y th·ªùi gian hi·ªán t·∫°i (t·ªëi ∆∞u h√≥a)
 * @return {string} Th·ªùi gian ƒë·ªãnh d·∫°ng yyyy-MM-dd HH:mm:ss
 */
function getTimeNow() {
  const now = new Date();
  const timezone = "GMT+" + (-now.getTimezoneOffset() / 60);
  return Utilities.formatDate(now, timezone, "yyyy-MM-dd HH:mm:ss");
}

/**
 * Setup trigger t·ª± ƒë·ªông - DISABLED for manual execution mode
 */
function setupTrigger() {
  Logger.log("‚ö†Ô∏è T·∫°o trigger t·ª± ƒë·ªông ƒë√£ B·ªä T·∫ÆT - Ch·ªâ ch·∫ø ƒë·ªô th·ª±c thi th·ªß c√¥ng");
  // Auto trigger creation has been disabled per user preference
  // Script should be run manually from Google Apps Script interface
}

/**
 * X√≥a t·∫•t c·∫£ triggers
 */
function deleteTrigger() {
  const triggers = ScriptApp.getProjectTriggers();
  for (let i = 0; i < triggers.length; i++) {
    ScriptApp.deleteTrigger(triggers[i]);
  }
  Logger.log("üóëÔ∏è ƒê√£ x√≥a t·∫•t c·∫£ triggers");
}

/**
 * G·ª≠i email th√¥ng b√°o l·ªói
 * @param {string} bug - N·ªôi dung l·ªói
 */
function sendMail(bug) {
  const config = getConfig();
  const scriptURL = 'https://script.google.com/macros/d/' + ScriptApp.getScriptId() + '/edit';
  const email = Session.getActiveUser().getEmail();
  const header = config.EMAIL_ERROR_SUBJECT;
  const body = `
    <p style="font-size:20px;">
      Ch√†o b·∫°n,<br><br>
      ƒê√£ c√≥ l·ªói trong qu√° tr√¨nh Copy. Vui l√≤ng li√™n h·ªá v·ªõi t√¥i b·∫±ng c√°ch t·∫°o issue
      <a href="${config.GITHUB_ISSUE_URL}">t·∫°i ƒë√¢y</a> v√† b√°o l·ªói b√™n d∆∞·ªõi:<br><br>
      ${bug}<br><br>
      <a style="color:red;">Script ƒë√£ t·∫Øt t√≠nh nƒÉng auto resume. B·∫°n vui l√≤ng ch·∫°y l·∫°i script l·∫ßn n·ªØa ƒë·ªÉ k√≠ch ho·∫°t l·∫°i t√≠nh nƒÉng auto resume</a>.
      B·∫°n c√≥ th·ªÉ truy c·∫≠p script nhanh <a href="${scriptURL}">t·∫°i ƒë√¢y</a>.<br><br>
      Th√¢n,<br><br>
      ${config.TOOL_NAME}.
    </p>
  `;

  try {
    MailApp.sendEmail({
      to: email,
      subject: header,
      htmlBody: body
    });
    Logger.log("üìß ƒê√£ g·ª≠i email th√¥ng b√°o l·ªói");
  } catch (error) {
    Logger.log("‚ùå L·ªói khi g·ª≠i email: " + error.toString());
  }
}

/**
 * G·ª≠i email th√¥ng b√°o ho√†n th√†nh
 * @param {string} link - Link ƒë·∫øn folder ƒë√£ copy
 */
function sendEmailComplete(link) {
  const config = getConfig();
  const email = Session.getActiveUser().getEmail();
  const header = config.EMAIL_SUCCESS_SUBJECT;
  const body = `
    <p style="font-size:20px;">
      Ch√†o b·∫°n,<br><br>
      Qu√° tr√¨nh Copy ƒë√£ ho√†n th√†nh th√†nh c√¥ng!<br><br>
      B·∫°n c√≥ th·ªÉ truy c·∫≠p folder ƒë√£ copy <a href="${link}">t·∫°i ƒë√¢y</a>.<br><br>
      Th√¢n,<br><br>
      ${config.TOOL_NAME}.
    </p>
  `;

  try {
    MailApp.sendEmail({
      to: email,
      subject: header,
      htmlBody: body
    });
    Logger.log("üìß ƒê√£ g·ª≠i email th√¥ng b√°o ho√†n th√†nh");
  } catch (error) {
    Logger.log("‚ùå L·ªói khi g·ª≠i email: " + error.toString());
  }
}

/**
 * G·ª≠i email ho√†n th√†nh v·ªõi b√°o c√°o chi ti·∫øt
 * @param {string} link - Link ƒë·∫øn folder ƒë√£ copy
 * @param {string} report - B√°o c√°o chi ti·∫øt
 */
function sendEmailCompleteWithReport(link, report) {
  const config = getConfig();
  const email = Session.getActiveUser().getEmail();
  const header = config.EMAIL_SUCCESS_SUBJECT + " - B√°o c√°o chi ti·∫øt";

  const body = `
    <div style="font-family: Arial, sans-serif; max-width: 800px;">
      <h2 style="color: #4CAF50;">‚úÖ Copy ho√†n th√†nh th√†nh c√¥ng!</h2>

      <p style="font-size: 16px;">
        Ch√†o b·∫°n,<br><br>
        Qu√° tr√¨nh Copy ƒë√£ ho√†n th√†nh th√†nh c√¥ng v·ªõi b√°o c√°o chi ti·∫øt b√™n d∆∞·ªõi.
      </p>

      <div style="background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin: 20px 0;">
        <h3>üîó Truy c·∫≠p folder ƒë√£ copy:</h3>
        <a href="${link}" style="color: #2196F3; font-size: 16px;">${link}</a>
      </div>

      <div style="background-color: #fff; border: 1px solid #ddd; padding: 20px; border-radius: 5px;">
        <h3>üìä B√°o c√°o chi ti·∫øt:</h3>
        <pre style="background-color: #f8f8f8; padding: 15px; border-radius: 3px; overflow-x: auto; font-size: 12px;">${report}</pre>
      </div>

      <p style="margin-top: 30px; color: #666;">
        Th√¢n,<br>
        <strong>${config.TOOL_NAME}</strong>
      </p>
    </div>
  `;

  try {
    MailApp.sendEmail({
      to: email,
      subject: header,
      htmlBody: body
    });
    Logger.log("üìß ƒê√£ g·ª≠i email b√°o c√°o ho√†n th√†nh");
  } catch (error) {
    Logger.log("‚ùå L·ªói khi g·ª≠i email b√°o c√°o: " + error.toString());
  }
}

/**
 * Setup auto resume system - DISABLED for manual execution mode
 * @param {Folder} folder - Folder ƒë√≠ch
 */
function setupAutoResume(folder) {
  Logger.log("‚ö†Ô∏è Auto resume system is DISABLED - Manual execution mode only");
  // Auto resume has been disabled per user preference
  // No marker files or triggers will be created
  // Script should be run manually when needed
}

/**
 * Ki·ªÉm tra tr·∫°ng th√°i auto resume
 * @param {Folder} folder - Folder ch·ª©a marker files
 * @return {number} 0 n·∫øu t·∫Øt, 1 n·∫øu b·∫≠t
 */
function getStatusAutoResume(folder) {
  const config = getConfig();
  const triggerExist = ScriptApp.getProjectTriggers().length;
  const onAutoResumeFile = folder.getFilesByName(config.AUTO_RESUME_ON_MARKER);

  if (onAutoResumeFile.hasNext()) {
    // N·∫øu c√≥ file "on" nh∆∞ng kh√¥ng c√≥ trigger th√¨ coi nh∆∞ t·∫Øt
    return triggerExist > 0 ? 1 : 0;
  }

  // Kh√¥ng c√≥ file "on" th√¨ x√≥a trigger v√† return 0
  if (triggerExist > 0) {
    deleteTrigger();
  }
  return 0;
}

/**
 * Setup auto resume v√† trigger - DISABLED for manual execution mode
 * @param {Folder} targetFolder - Folder ƒë√≠ch
 */
function setupAutoResumeAndTrigger(targetFolder) {
  Logger.log("‚ö†Ô∏è Auto resume and trigger system is DISABLED - Manual execution mode only");
  // Auto resume and trigger creation has been disabled per user preference
  // Script should be run manually from Google Apps Script interface
  // No marker files or triggers will be created
}

/**
 * Cleanup v√† g·ª≠i th√¥ng b√°o ho√†n th√†nh - SIMPLIFIED for manual execution mode
 * @param {Folder} targetFolder - Folder ƒë√≠ch
 * @param {string} report - B√°o c√°o chi ti·∫øt
 */
function cleanupAndNotify(targetFolder, report) {
  const config = getConfig();

  try {
    Logger.log("üßπ B·∫Øt ƒë·∫ßu cleanup (manual execution mode)...");

    // No marker files to clean up in manual execution mode
    // No triggers to delete in manual execution mode

    // Cleanup performance engine
    const performanceEngine = getPerformanceEngine();
    performanceEngine.cleanup();

    // G·ª≠i email th√¥ng b√°o ho√†n th√†nh
    if (config.SEND_COMPLETION_EMAIL) {
      const folderUrl = targetFolder.getUrl();
      sendEmailCompleteWithReport(folderUrl, report);
    }

    Logger.log("‚úÖ Cleanup ho√†n th√†nh (manual execution mode)");

  } catch (error) {
    Logger.log("‚ùå L·ªói trong qu√° tr√¨nh cleanup: " + error.toString());

    // V·∫´n c·ªë g·∫Øng g·ª≠i email th√¥ng b√°o l·ªói
    if (config.SEND_ERROR_EMAIL) {
      sendMail("L·ªói trong cleanup: " + error.toString());
    }
  }
}

/**
 * Format file size th√†nh string d·ªÖ ƒë·ªçc
 * @param {number} bytes - K√≠ch th∆∞·ªõc file t√≠nh b·∫±ng bytes
 * @return {string} K√≠ch th∆∞·ªõc ƒë√£ format
 */
function formatFileSize(bytes) {
  if (bytes === 0) return '0 B';

  const k = 1024;
  const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));

  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

/**
 * T·∫°o progress bar text
 * @param {number} percentage - Ph·∫ßn trƒÉm ho√†n th√†nh
 * @return {string} Progress bar string
 */
function generateProgressBar(percentage) {
  const barLength = 30;
  const filledLength = Math.round((percentage / 100) * barLength);
  const emptyLength = barLength - filledLength;

  const filledBar = '‚ñà'.repeat(filledLength);
  const emptyBar = '‚ñë'.repeat(emptyLength);

  return `[${filledBar}${emptyBar}] ${percentage}%`;
}

/**
 * Validate URL format v√† tr√≠ch xu·∫•t folder ID
 * @param {string} url - Google Drive folder URL
 * @return {string|null} Folder ID ho·∫∑c null n·∫øu kh√¥ng h·ª£p l·ªá
 */
function extractFolderIdFromUrl(url) {
  if (!url || typeof url !== 'string') {
    return null;
  }

  const match = url.match(/(?<=folders\/)([a-zA-Z0-9_-]+)(?=\?|$)/);
  return match ? match[0] : null;
}

/**
 * Ki·ªÉm tra quy·ªÅn truy c·∫≠p folder
 * @param {string} folderId - ID c·ªßa folder
 * @return {boolean} True n·∫øu c√≥ quy·ªÅn truy c·∫≠p
 */
function checkFolderAccess(folderId) {
  try {
    const folder = DriveApp.getFolderById(folderId);
    folder.getName(); // Test access
    return true;
  } catch (error) {
    Logger.log(`‚ùå Kh√¥ng th·ªÉ truy c·∫≠p folder ${folderId}: ${error.toString()}`);
    return false;
  }
}

/**
 * T·∫°o backup c·ªßa c·∫•u h√¨nh hi·ªán t·∫°i
 * @return {Object} Backup object
 */
function createConfigBackup() {
  const config = getConfig();
  const backup = {
    timestamp: new Date(),
    config: JSON.parse(JSON.stringify(config)),
    scriptId: ScriptApp.getScriptId(),
    userEmail: Session.getActiveUser().getEmail()
  };

  Logger.log("üíæ ƒê√£ t·∫°o backup c·∫•u h√¨nh");
  return backup;
}

/**
 * Log th√¥ng tin h·ªá th·ªëng ƒë·ªÉ debug
 */
function logSystemInfo() {
  try {
    Logger.log("üîç TH√îNG TIN H·ªÜ TH·ªêNG:");
    Logger.log("- ID Script: " + ScriptApp.getScriptId());
    Logger.log("- Ng∆∞·ªùi d√πng: " + Session.getActiveUser().getEmail());
    Logger.log("- M√∫i gi·ªù: " + Session.getScriptTimeZone());
    Logger.log("- Triggers: " + ScriptApp.getProjectTriggers().length);

    const config = getConfig();
    Logger.log("- Ch·∫ø ƒë·ªô hi·ªáu su·∫•t: " + (config.PERFORMANCE_MODE || 'M·∫∂C ƒê·ªäNH'));
    Logger.log("- S·ªë file t·ªëi ƒëa m·ªói l·∫ßn ch·∫°y: " + config.MAX_FILES_PER_RUN);

  } catch (error) {
    Logger.log("‚ùå L·ªói khi log system info: " + error.toString());
  }
}

/**
 * Retry function v·ªõi exponential backoff
 * @param {Function} fn - Function c·∫ßn retry
 * @param {number} maxRetries - S·ªë l·∫ßn retry t·ªëi ƒëa
 * @param {number} baseDelay - Delay c∆° b·∫£n (ms)
 * @return {*} K·∫øt qu·∫£ c·ªßa function
 */
function retryWithBackoff(fn, maxRetries = 3, baseDelay = 1000) {
  let lastError;

  for (let attempt = 0; attempt < maxRetries; attempt++) {
    try {
      return fn();
    } catch (error) {
      lastError = error;

      if (attempt < maxRetries - 1) {
        const delay = baseDelay * Math.pow(2, attempt);
        Logger.log(`‚ö†Ô∏è Th·ª≠ l·∫°i ${attempt + 1}/${maxRetries} sau ${delay}ms`);
        Utilities.sleep(delay);
      }
    }
  }

  throw new Error(`Function failed after ${maxRetries} attempts: ${lastError.toString()}`);
}

/**
 * Ki·ªÉm tra v√† t·∫°o folder n·∫øu ch∆∞a t·ªìn t·∫°i
 * @param {string} folderName - T√™n folder
 * @param {Folder} parentFolder - Folder cha
 * @return {Folder} Folder ƒë√£ t·∫°o ho·∫∑c ƒë√£ t·ªìn t·∫°i
 */
function getOrCreateFolder(folderName, parentFolder) {
  const existingFolders = parentFolder.getFoldersByName(folderName);

  if (existingFolders.hasNext()) {
    return existingFolders.next();
  } else {
    return parentFolder.createFolder(folderName);
  }
}
